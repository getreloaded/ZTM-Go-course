//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

const max int = 20

type Job int

var wg sync.WaitGroup

func longCalculation(i Job) int {
	duration := time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", i, duration)
	return int(i) * 30
}

func makeJobs() []Job {
	jobs := make([]Job, 0, max)
	for i := 0; i < cap(jobs); i++ {
		jobs = append(jobs, Job(rand.Intn(10000)))
	}
	return jobs
}

func calulator(jobChannel <-chan Job, resultChannel chan<- Job) {
	select {
	case job := <-jobChannel:
		resultChannel <- Job(longCalculation(job))
		wg.Done()
	default:
		fmt.Println("No more jobs")
	}
}

func main() {
	t := time.Now()
	rand.Seed(time.Now().UnixNano())
	jobs := makeJobs()

	var total Job = 0
	Jobch := make(chan Job, 100)
	ResultCh := make(chan Job, 100)

	for i := 0; i < len(jobs); i++ {
		wg.Add(1)
		Jobch <- jobs[i]
		go calulator(Jobch, ResultCh)
	}

	wg.Wait()
	for i := 0; i < len(jobs); i++ {
		total += <-ResultCh
	}

	fmt.Println("Final Tally:", total, "Time elapsed", time.Since(t))

}
